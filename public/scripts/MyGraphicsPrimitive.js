export class MyGraphicsPrimitive2D {
    constructor(shift) {
        this.shift = shift;
    }
    movePrimitive() {
        console.log(`item shifted by ${this.shift} units`);
    }
}
export class MyAreaPrimitive2D extends MyGraphicsPrimitive2D {
    constructor(rectangularWidth, rectangularHeight, topLeftBorder, rightBottomBorder) {
        super();
        this.rectangularWidth = rectangularWidth;
        this.rectangularHeight = rectangularHeight;
        this.topLeftBorder = topLeftBorder;
        this.rightBottomBorder = rightBottomBorder;
        this.primitiveArea = this.rectangularWidth * this.rectangularHeight;
    }
    getPrimitiveArea() {
        console.log(`the area of the rectangle is ${this.primitiveArea}`);
    }
}
export class MyCircle extends MyAreaPrimitive2D {
    constructor(circleCenter, circleRadios) {
        super();
        this.circleCenter = circleCenter;
        this.circleRadios = circleRadios;
    }
    getCircle() {
        console.log(`Circle radios: ${this.circleRadios} \nCircle center: ${this.circleCenter} \n `);
    }
}
export class MyRectangle extends MyAreaPrimitive2D {
    constructor(rectangularWidth, rectangularHeight, topLeftBorder, rightBottomBorder) {
        super(rectangularWidth, rectangularHeight, topLeftBorder, rightBottomBorder);
    }
    getRectangle() {
        console.log(`rectangle characteristics: ${this.rectangularWidth}, ${this.rectangularHeight}, ${this.topLeftBorder}, ${this.rightBottomBorder}`);
    }
}
const circleCenter = 10;
const circleRadios = 5;
const circle = new MyCircle(circleCenter, circleRadios);
const rectangle = new MyRectangle(5, 5, 5, 5);
rectangle.getRectangle();
circle.getCircle();
rectangle.getPrimitiveArea();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXlHcmFwaGljc1ByaW1pdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9NeUdyYXBoaWNzUHJpbWl0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNBLE1BQU0sT0FBZ0IscUJBQXFCO0lBR3pDLFlBQXNCLEtBQWM7UUFDbEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUNTLGFBQWE7UUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsSUFBSSxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUE7SUFDcEQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFnQixpQkFBa0IsU0FBUSxxQkFBcUI7SUFPbkUsWUFDRSxnQkFBeUIsRUFDekIsaUJBQTBCLEVBQzFCLGFBQXNCLEVBQ3RCLGlCQUEwQjtRQUUxQixLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7UUFDM0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO1FBQzNDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztJQUN0RSxDQUFDO0lBQ0QsZ0JBQWdCO1FBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUE7SUFDbkUsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLFFBQVMsU0FBUSxpQkFBaUI7SUFJN0MsWUFDRSxZQUFvQixFQUNwQixZQUFvQjtRQUVwQixLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQ25DLENBQUM7SUFDRCxTQUFTO1FBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLFlBQVkscUJBQXFCLElBQUksQ0FBQyxZQUFZLE1BQU0sQ0FBQyxDQUFBO0lBQzlGLENBQUM7Q0FDRjtBQUNELE1BQU0sT0FBTyxXQUFZLFNBQVEsaUJBQWlCO0lBQ2hELFlBQVksZ0JBQXdCLEVBQUUsaUJBQXlCLEVBQUUsYUFBcUIsRUFBRSxpQkFBeUI7UUFDL0csS0FBSyxDQUFDLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFDRCxZQUFZO1FBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsSUFBSSxDQUFDLGdCQUFnQixLQUFLLElBQUksQ0FBQyxpQkFBaUIsS0FBSyxJQUFJLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUE7SUFDakosQ0FBQztDQUNGO0FBR0QsTUFBTSxZQUFZLEdBQVcsRUFBRSxDQUFDO0FBQ2hDLE1BQU0sWUFBWSxHQUFXLENBQUMsQ0FBQztBQUUvQixNQUFNLE1BQU0sR0FBRyxJQUFJLFFBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUE7QUFDdkQsTUFBTSxTQUFTLEdBQUcsSUFBSSxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFOUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFBO0FBQ3hCLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtBQUNsQixTQUFTLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgUmVjdGFuZ3VsYXJGaWVsZCB7XG4gIHJlY3Rhbmd1bGFyQXJlYTogbnVtYmVyIHwgc3RyaW5nXG59XG5leHBvcnQgaW50ZXJmYWNlIFJlY3Rhbmd1bGFyIHtcbiAgcmVjdGFuZ3VsYXJXaWR0aDogbnVtYmVyLFxuICByZWN0YW5ndWxhckhlaWdodDogbnVtYmVyLFxuICB0b3BMZWZ0Qm9yZGVyOiBudW1iZXIsXG4gIHJpZ2h0Qm90dG9tQm9yZGVyOiBudW1iZXJcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQ2lyY2xlIHtcbiAgY2lyY2xlQ2VudGVyOiBudW1iZXIsXG4gIGNpcmNsZVJhZGlvczogbnVtYmVyLFxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTXlHcmFwaGljc1ByaW1pdGl2ZTJEIGltcGxlbWVudHMgUmVjdGFuZ3VsYXJGaWVsZCB7XG4gIHB1YmxpYyByZWN0YW5ndWxhckFyZWE6IG51bWJlclxuICBwcm90ZWN0ZWQgc2hpZnQ6IG51bWJlclxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3Ioc2hpZnQ/OiBudW1iZXIpIHtcbiAgICB0aGlzLnNoaWZ0ID0gc2hpZnQ7XG4gIH1cbiAgcHJvdGVjdGVkIG1vdmVQcmltaXRpdmUoKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coYGl0ZW0gc2hpZnRlZCBieSAke3RoaXMuc2hpZnR9IHVuaXRzYClcbiAgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTXlBcmVhUHJpbWl0aXZlMkQgZXh0ZW5kcyBNeUdyYXBoaWNzUHJpbWl0aXZlMkQgaW1wbGVtZW50cyBSZWN0YW5ndWxhciB7XG4gIHByb3RlY3RlZCBwcmltaXRpdmVBcmVhOiBudW1iZXJcbiAgcHVibGljIHJlY3Rhbmd1bGFyV2lkdGg6IG51bWJlclxuICBwdWJsaWMgcmVjdGFuZ3VsYXJIZWlnaHQ6IG51bWJlclxuICBwdWJsaWMgdG9wTGVmdEJvcmRlcjogbnVtYmVyXG4gIHB1YmxpYyByaWdodEJvdHRvbUJvcmRlcjogbnVtYmVyXG5cbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKFxuICAgIHJlY3Rhbmd1bGFyV2lkdGg/OiBudW1iZXIsXG4gICAgcmVjdGFuZ3VsYXJIZWlnaHQ/OiBudW1iZXIsXG4gICAgdG9wTGVmdEJvcmRlcj86IG51bWJlcixcbiAgICByaWdodEJvdHRvbUJvcmRlcj86IG51bWJlclxuICApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucmVjdGFuZ3VsYXJXaWR0aCA9IHJlY3Rhbmd1bGFyV2lkdGg7XG4gICAgdGhpcy5yZWN0YW5ndWxhckhlaWdodCA9IHJlY3Rhbmd1bGFySGVpZ2h0O1xuICAgIHRoaXMudG9wTGVmdEJvcmRlciA9IHRvcExlZnRCb3JkZXI7XG4gICAgdGhpcy5yaWdodEJvdHRvbUJvcmRlciA9IHJpZ2h0Qm90dG9tQm9yZGVyO1xuICAgIHRoaXMucHJpbWl0aXZlQXJlYSA9IHRoaXMucmVjdGFuZ3VsYXJXaWR0aCAqIHRoaXMucmVjdGFuZ3VsYXJIZWlnaHQ7XG4gIH1cbiAgZ2V0UHJpbWl0aXZlQXJlYSgpOiB2b2lke1xuICAgIGNvbnNvbGUubG9nKGB0aGUgYXJlYSBvZiB0aGUgcmVjdGFuZ2xlIGlzICR7dGhpcy5wcmltaXRpdmVBcmVhfWApXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE15Q2lyY2xlIGV4dGVuZHMgTXlBcmVhUHJpbWl0aXZlMkQgaW1wbGVtZW50cyBDaXJjbGUge1xuICBjaXJjbGVDZW50ZXI6IG51bWJlclxuICBjaXJjbGVSYWRpb3M6IG51bWJlclxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNpcmNsZUNlbnRlcjogbnVtYmVyLFxuICAgIGNpcmNsZVJhZGlvczogbnVtYmVyXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jaXJjbGVDZW50ZXIgPSBjaXJjbGVDZW50ZXI7XG4gICAgdGhpcy5jaXJjbGVSYWRpb3MgPSBjaXJjbGVSYWRpb3M7XG4gIH1cbiAgZ2V0Q2lyY2xlKCk6IHZvaWR7XG4gICAgY29uc29sZS5sb2coYENpcmNsZSByYWRpb3M6ICR7dGhpcy5jaXJjbGVSYWRpb3N9IFxcbkNpcmNsZSBjZW50ZXI6ICR7dGhpcy5jaXJjbGVDZW50ZXJ9IFxcbiBgKVxuICB9XG59XG5leHBvcnQgY2xhc3MgTXlSZWN0YW5nbGUgZXh0ZW5kcyBNeUFyZWFQcmltaXRpdmUyRCB7XG4gIGNvbnN0cnVjdG9yKHJlY3Rhbmd1bGFyV2lkdGg6IG51bWJlciwgcmVjdGFuZ3VsYXJIZWlnaHQ6IG51bWJlciwgdG9wTGVmdEJvcmRlcjogbnVtYmVyLCByaWdodEJvdHRvbUJvcmRlcjogbnVtYmVyKSB7XG4gICAgc3VwZXIocmVjdGFuZ3VsYXJXaWR0aCwgcmVjdGFuZ3VsYXJIZWlnaHQsIHRvcExlZnRCb3JkZXIsIHJpZ2h0Qm90dG9tQm9yZGVyKTtcbiAgfVxuICBnZXRSZWN0YW5nbGUoKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coYHJlY3RhbmdsZSBjaGFyYWN0ZXJpc3RpY3M6ICR7dGhpcy5yZWN0YW5ndWxhcldpZHRofSwgJHt0aGlzLnJlY3Rhbmd1bGFySGVpZ2h0fSwgJHt0aGlzLnRvcExlZnRCb3JkZXJ9LCAke3RoaXMucmlnaHRCb3R0b21Cb3JkZXJ9YClcbiAgfVxufVxuXG5cbmNvbnN0IGNpcmNsZUNlbnRlcjogbnVtYmVyID0gMTA7XG5jb25zdCBjaXJjbGVSYWRpb3M6IG51bWJlciA9IDU7XG5cbmNvbnN0IGNpcmNsZSA9IG5ldyBNeUNpcmNsZShjaXJjbGVDZW50ZXIsIGNpcmNsZVJhZGlvcylcbmNvbnN0IHJlY3RhbmdsZSA9IG5ldyBNeVJlY3RhbmdsZSg1LCA1LCA1LCA1KTtcblxucmVjdGFuZ2xlLmdldFJlY3RhbmdsZSgpXG5jaXJjbGUuZ2V0Q2lyY2xlKClcbnJlY3RhbmdsZS5nZXRQcmltaXRpdmVBcmVhKClcblxuIl19